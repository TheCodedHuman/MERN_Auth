login and register controller

export const register = async (req, res) => {
    const { name, email, password } req.body;

    if (!name || !email || !password) {
        return res.json({
            success: false,
            message: 'Missing Details'
        })
    }

    try {
        const existingUser = await User.findOne({ email })

        if (existingUser) {
            return res.json({
                success: false,
                message: "User already exists"
            })
        }

        const hashedPassword = await bcrypt.hash(password, 10)
        const user = new User({ name, email, password: hashedPassword })

        await user.save()

        const token = jwt.sign(id: user._id, process.env.JWT_SECRET, {
            expireIn: '7d'
        })

        res.cookie('token', token, {
            httpOnly: true,
            secure: process.env.NODE_ENV === 'production',
            sameSite: process.env.NODE_ENV === 'production' ? 'none' : 'strict',
            maxAge: 7 * 24 * 60 * 60 * 1000
        })

        return res.json({ success: true })

    } catch (error) {
        res.json({ success: false, message: error.message })
    }

}

export const login = async (req, res) => {
    const { email, password } = req.body;

    if (!email || !password) {
        return res.json({ success: false, message: 'Email and password are required' })
    }

    try {
        const user = await User.findOne({ email })

        if (!user) {
            reutrn res.json({ success: false, message: "Invalid email" })
        }

        const isMatch = await bcrypt.compare(password, user.password)

        if (!isMatch) {
            return res.json({ success: false, message: "Invalid password" })
        }

        const token = jwt.sign(id: user._id, process.env.JWT_SECRET, {
            expireIn: '7d'
        })

        res.cookie('token', token, {
            httpOnly: true,
            secure: process.env.NODE_ENV === 'production',
            sameSite: process.env.NODE_ENV === 'production' ? 'none' : 'strict',
            maxAge: 7 * 24 * 60 * 60 * 1000
        })

        return res.json({ success: true })

    } catch (error) {
        return res.json({ success: false, message: error.message })
    }
}

export const logout = async (req, res) => {
    try {

    res.clearCookie('token', {
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        sameSite: process.env.NODE_ENV === 'production'? 'none' : 'strict'
    })

    return res.json({ success: true, message: "Logged Out" })

    } catch (error) {
        return res.json({ success: false, message: error.message })
    }
}



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

console.log Black color text with no icon

console.info Blue color text with icon

console.debug Pure black color text

console.warn Yellow color text with icon

console.error Red Color text with icon

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



/*

const sendEmail = async (to, subject, html) => {
    try {
        const transporter = nodemailer.createTransport({
            host: process.env.SMTP_HOST,
            port: process.env.SMTP_PORT,
            auth: {
                user: process.env.SMTP_USER,
                pass: process.env.SMTP_PASS
            }
        });

        const info = await transporter.sendMail({
            from: `"Chai Backend" <${process.env.SMTP_USER}>`,
            to,
            subject,
            html
        });

        return info;
    } catch (error) {
        console.error("Error sending email:", error.message);
        throw error;
    }
};

*/



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


import jwt from 'jsonwebtoken'
import { User } from '../models/user.model.js'

const userAuth = async(req, res, next) => {
    const { token } = req.cookies

    if (!token) {
        return res.json({ success: false, message: 'Not Authorized, Login Again' })
    }

    try {
        const tokenDecode = jwt.verify(token, process.env.JWT_SECRET)

        if (tokenDecode.id) {
            req.body.userId = tokenDecode.id
        } else {
            return res.json({ success: false, message: 'Not Authorized Login Again' })
        }
    } catch (error) {
        res.json({ success: false, message, error: error.message })
    }
}

export default userAuth


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


const isAuthenticated = async (req, res) => {
    try {
        return res.json({ success: true })
    } catch (error) {
        res.json({ success: false, message: error.message })
    }
}

const sendResetOtp = async (req, res) => {

    const { email } = req.body

    if (!email) {
        return res.json({ success: false, message: 'Email is required' })
    }

    try {
        const user = await User.findOne({ email })
        if (!user) {
            return res.json({ success: false, message: 'User not found' })
        }

        const otp = String(Math.floor(100000 + Math.random() * 900000))
        user.verifyOtp = otp
        user.verifyOtpExpiredAt = Date.now() + 24 * 60 * 60 * 1000

        await user.save()

        const mailDetails = {
            from: process.env.SENDER_EMAIL,
            to: user.email,
            subject: 'Password Reset OTP',
            text: `Your OTP for resetting your password is ${otp}. Use this OTP to proceed with resetting your password.`
        }

        await sendEmail.sendMail(mailOption)

        return res.json({ success: true, message: 'OTP sent to your email' })

    } catch (error) {
        return res.json({ success: false, message: error.message })
    }
}



const veri2fyOTP = asyncHandler(async (req, res) => {
    const { otp } = req.body;
    const user = req.user;

    if (!otp) throw new ApiError(400, "OTP is required");

    if (user.verifyOtp === '' || user.verifyOtp !== otp)
        throw new ApiError(400, "Invalid OTP");

    if (user.verifyOtpExpiredAt < Date.now())
        throw new ApiError(400, "OTP Expired");

    user.isAccountVerified = true;
    user.verifyOtp = '';
    user.verifyOtpExpiredAt = 0;

    await user.save();

    // Generate tokens
    const accessToken = generateAccessToken(user);
    const refreshToken = generateRefreshToken(user);

    return res
        .status(200)
        .cookie("accessToken", accessToken, options)
        .cookie("refreshToken", refreshToken, options)
        .json(new ApiResponse(200, {
            user, accessToken, refreshToken
        }, "User verified and logged in successfully"));
});



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


PASSWORD CHANGE

const changeCurrentPassword = async (req, res) => {

    // 

    const { email, otp, newPassword } = req.body

    if (!email || !otp || !newPassword) {
        return res.json({ success: false, message: 'Email, OTP, and new password are required' })
    }

    try {

        const user = await User.findOne({ email })

        if (!user) {
            return res.json({ success: false, message: 'User not found' })
        }

        if (user.resetOtp === "" || user.resetOtp !== otp) {
            return res.json({ success: false, message: 'Invalid OTP' })
        }

        if (user.resetOtpExpireAt < Date.now()) {
            return res.json({ success: false, message: 'OTP Expired' })
        }

        const hashedPassword = await bcrypt.hash(newPassword, 10)

        user.password = hashedPassword
        user.resetOtp = ''
        user.resetOtpExpireAt = 0

        await user.save()

        return res.json({
            success: true, message: 'Password has been reset successsfully'
        })

    } catch (error) {
        return res.json({ success: false, message: error.message })
    }

}



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


// Here we are fabricating controller functions relating to user model but focused on OTP verification

// imports
import { ApiError, ApiResponse } from "../utils/ApiUtils.js"
import { User } from "../models/user.model.js"
import { OTP_EXPIRY_DURATION } from "../constants.js"
import asyncHandler from "../utils/asyncHandler.js"
import sendEmail from "../utils/mailSender.js"
import generateCode from "../utils/codeGenerator.js"
impor

// literals



// defined
const sendOTP = asyncHandler(async (req, res) => {
    
    const user = req.user                                       // verifyJWT helps getting this

    if (user.isAccountVerified) {
        return res
            .status(200)
            .json(new ApiResponse(200, {}, "Account already verified"));
    }
    const otp = generateCode()

    user.verifyOtp = otp
    user.verifyOtpExpiredAt = Date.now() + OTP_EXPIRY_DURATION

    await user.save()

    // sending otp via email
    const mailDetails = {
        from: process.env.SENDER_EMAIL,
        to: user.email,
        subject: 'Account verification OTP',
        text: `Your OTP is ${otp}. Verify your account using this OTP.`
    }

    try {
        await sendEmail.sendMail(mailDetails)
    } catch (error) {
        console.error("OTP email failed", error.message)
        // throw new ApiError(504, "Unable to send OTP on email")       // not optimal
    }

    return res
        .status(201)
        .json(new ApiResponse(200, {}, "OTP saved; email dispatch pending or failed"))
})



// main




const verifyOTP = asyncHandler(async (req, res) => {

    // get user from request as can't enter or recieve otp without login already
    // send otp when user login -> takes stranger's email
    // user enter's that email in this website
    // check empty enters -> throw ? or return ?
    // if not empty and right otp
    // do user login
    // maybe

    /*
        return res
        .status(200)
        .cookie("accessToken", accessToken, options)
        .cookie("refreshToken", refreshToken, options)
        .json(
            new ApiResponse(200, {
                user: loggedInUser, accessToken, refreshToken
            }, "User logged in successfully")
        )
})
    */


    const { userId, otp } = req.body

    if (!userId || !otp) {
        return res.json({
            success: false, message: 'Missing Details'
        })
    }

    try {
        const user = await User.findById(userId)

        if (!user) {
            return res.json({ success: false, message: 'User not found' })
        }

        if (user.verifyOtp === '' || user.verifyOtp !== otp) {
            return res.json({ success: false, message: 'Invalid OTP' })
        }

        if (user.verifyOtpExpiredAt < Date.now()) {
            return res.json({ success: false, message: 'OTP Expired' })
        }

        user.isAccountVerified = true
        user.verifyOtp = ''
        user.verifyOtpExpiredAt = 0;

        await user.save()
        return res.json({ success: true, message: 'Email verified successsfully' })

    } catch (error) {
        return res.json({ success: false, message: error.message })
    }

})

const isAuthenticated = async (req, res) => {
    try {
        return res.json({ success: true })
    } catch (error) {
        res.json({ success: false, message: error.message })
    }
}

const sendResetOtp = async (req, res) => {

    const { email } = req.body

    if (!email) {
        return res.json({ success: false, message: 'Email is required' })
    }

    try {
        const user = await User.findOne({ email })
        if (!user) {
            return res.json({ success: false, message: 'User not found' })
        }

        const otp = String(Math.floor(100000 + Math.random() * 900000))
        user.verifyOtp = otp
        user.verifyOtpExpiredAt = Date.now() + 24 * 60 * 60 * 1000

        await user.save()

        const mailDetails = {
            from: process.env.SENDER_EMAIL,
            to: user.email,
            subject: 'Password Reset OTP',
            text: `Your OTP for resetting your password is ${otp}. Use this OTP to proceed with resetting your password.`
        }

        await sendEmail.sendMail(mailOption)

        return res.json({ success: true, message: 'OTP sent to your email' })

    } catch (error) {
        return res.json({ success: false, message: error.message })
    }
}



const verifyOTP = asyncHandler(async (req, res) => {
    const { otp } = req.body;
    const user = req.user;

    if (!otp) throw new ApiError(400, "OTP is required");

    if (user.verifyOtp === '' || user.verifyOtp !== otp)
        throw new ApiError(400, "Invalid OTP");

    if (user.verifyOtpExpiredAt < Date.now())
        throw new ApiError(400, "OTP Expired");

    user.isAccountVerified = true;
    user.verifyOtp = '';
    user.verifyOtpExpiredAt = 0;

    await user.save();

    // Generate tokens
    const accessToken = generateAccessToken(user);
    const refreshToken = generateRefreshToken(user);

    return res
        .status(200)
        .cookie("accessToken", accessToken, options)
        .cookie("refreshToken", refreshToken, options)
        .json(new ApiResponse(200, {
            user, accessToken, refreshToken
        }, "User verified and logged in successfully"));
});


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~




~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~